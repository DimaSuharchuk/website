diff --git a/photoswipe.module b/photoswipe.module
index 073f5b1..5e778da 100644
--- a/photoswipe.module
+++ b/photoswipe.module
@@ -40,6 +40,16 @@ function photoswipe_theme() {
       ],
       'file' => 'photoswipe.theme.inc',
     ],
+    'photoswipe_responsive_image_formatter' => [
+      'variables' => [
+        'item' => NULL,
+        'entity' => NULL,
+        'display_settings' => [],
+        'delta' => NULL,
+      ],
+      'template' => 'photoswipe-image-formatter',
+      'file' => 'photoswipe.theme.inc',
+    ],
     'photoswipe_container' => [
       'variables' => [],
     ],
diff --git a/photoswipe.theme.inc b/photoswipe.theme.inc
index 0913500..6c1a83e 100644
--- a/photoswipe.theme.inc
+++ b/photoswipe.theme.inc
@@ -5,6 +5,8 @@
  * Photoswipe theme preprocess functions.
  */
 
+use Drupal\Core\Cache\Cache;
+use Drupal\Core\Cache\CacheableMetadata;
 use Drupal\Core\Language\Language;
 use Drupal\image\Entity\ImageStyle;
 use Drupal\media\MediaInterface;
@@ -149,3 +151,156 @@ function template_preprocess_photoswipe_image_formatter(array &$variables) {
     $variables['attributes']['class'][] = 'hidden';
   }
 }
+
+/**
+ * Prepares variables for a Photoswipe responsive image field formatter.
+ *
+ * @param array $variables
+ *   An associative array containing:
+ *   - item: An ImageItem object.
+ *   - display_settings: optional image styles.
+ *
+ * @ingroup themeable
+ */
+function template_preprocess_photoswipe_responsive_image_formatter(array &$variables) {
+  $item = $variables['item'];
+  $settings = $variables['display_settings'];
+  // Add support for Drupal Core Media and media_entity Media references:
+  if (($item->entity instanceof Drupal\media\MediaInterface || $item->entity instanceof Drupal\media_entity\MediaInterface) && $item->entity->hasField($settings['photoswipe_reference_image_field'])) {
+    $item = $item->entity->get($settings['photoswipe_reference_image_field']);
+  }
+  $entity = $variables['entity'];
+  $uri = $item->entity->getFileUri();
+  $alt = !empty($item->alt) ? $item->alt : '';
+  $title = !empty($item->title) ? $item->title : '';
+
+  if (empty($alt) && !empty($item->field_file_image_alt_text[Language::LANGCODE_NOT_SPECIFIED])) {
+    $alt = $item->field_file_image_alt_text[Language::LANGCODE_NOT_SPECIFIED][0]['value'];
+  }
+  if (empty($title) && !empty($item->field_file_image_title_text[Language::LANGCODE_NOT_SPECIFIED])) {
+    $title = $item->field_file_image_title_text[Language::LANGCODE_NOT_SPECIFIED][0]['value'];
+  }
+
+  $image_style_store = \Drupal::entityTypeManager()->getStorage('image_style');
+  $resp_image_store = \Drupal::entityTypeManager()->getStorage('responsive_image_style');
+  $responsive_image_style = $resp_image_store->load($settings['photoswipe_node_style']);
+
+  $cache_tags = [];
+  if ($responsive_image_style) {
+    $cache_tags = Cache::mergeTags($cache_tags, $responsive_image_style->getCacheTags());
+    $image_styles_to_load = $responsive_image_style->getImageStyleIds();
+  }
+
+  $image_styles = $image_style_store->loadMultiple($image_styles_to_load);
+  foreach ($image_styles as $image_style) {
+    $cache_tags = Cache::mergeTags($cache_tags, $image_style->getCacheTags());
+  }
+
+  $image = [
+    '#theme' => 'responsive_image_formatter',
+    '#item' => $item,
+    '#item_attributes' => $item->_attributes,
+    '#responsive_image_style_id' => $responsive_image_style ? $responsive_image_style->id() : '',
+    '#cache' => [
+      'tags' => $cache_tags,
+    ],
+  ];
+
+  $meta_a = CacheableMetadata::createFromRenderArray($image);
+  $meta_b = CacheableMetadata::createFromObject($item->getEntity());
+  $meta_a->merge($meta_b)->applyTo($image);
+
+  if (isset($variables['delta']) && $variables['delta'] === 0 && !empty($settings['photoswipe_node_style_first'])) {
+    $responsive_image_style_first = $resp_image_store->load($settings['photoswipe_node_style_first']);
+    $image['#style_name'] = $responsive_image_style_first->id();
+  }
+
+  // The image.factory service will check if our image is valid.
+  $image_file = \Drupal::service('image.factory')->get($uri);
+  if ($image_file->isValid()) {
+    $image_width = $image_file->getWidth();
+    $image_height = $image_file->getHeight();
+  }
+  else {
+    $image_width = $image_height = NULL;
+  }
+
+  $dimensions = [];
+  if (!empty($image_width) && !empty($image_height)) {
+    $image['#width'] = $dimensions['width'] = $image_width;
+    $image['#height'] = $dimensions['height'] = $image_height;
+  }
+
+  // Create the path to the image that will show in Photoswipe.
+  if ($style_name = $settings['photoswipe_image_style']) {
+    // Load the image style.
+    $style = ImageStyle::load($style_name);
+
+    // Fetch the Image style path from the Image URI.
+    $path = $style->buildUrl($uri);
+
+    // Set the dimensions.
+    $style->transformDimensions($dimensions, $uri);
+  }
+  else {
+    $path = file_create_url($uri);
+  }
+
+  // Set Caption for this image.
+  if (isset($settings['photoswipe_caption'])) {
+    $caption_setting = $settings['photoswipe_caption'];
+    switch ($caption_setting) {
+      case 'alt':
+        $caption = $alt;
+        break;
+
+      case 'title':
+        $caption = $title;
+        break;
+
+      case 'node_title':
+        if (!empty($entity->title)) {
+          $caption = $entity->title->value;
+        }
+        else {
+          $caption = $alt;
+        }
+        break;
+
+      case 'custom':
+        $entity_type = $entity->getEntityTypeId();
+        $caption = \Drupal::token()->replace($settings['photoswipe_caption_custom'],
+          [$entity_type => $entity, 'file' => $item],
+          ['clear' => TRUE, 'langcode' => \Drupal::languageManager()->getCurrentLanguage()->getId()]);
+        break;
+
+      default:
+        // Assume the user wants to use another node field as the caption.
+        $field_view['#view_mode'] = ($settings['photoswipe_view_mode']) ? $settings['photoswipe_view_mode'] : 'default';
+        if (!isset($entity->{$caption_setting})) {
+          // No such field exists. We'd better warn and use something reliable.
+          $id = $entity->id();
+          $msg = "'Photoswipe Caption' is unset for field view '@fv' on node: @nid.";
+          \Drupal::logger('photoswipe')->warning($msg, [
+            '@fv' => $field_view['#view_mode'],
+            '@nid' => $id,
+          ]);
+          // Fallback to alt text:
+          $caption = $alt;
+          break;
+        }
+        $field_view = $entity->{$caption_setting}->view();
+        $caption = render($field_view);
+        break;
+    }
+  }
+  else {
+    $caption = $alt;
+  }
+
+  $variables['image'] = $image;
+  $variables['path'] = $path;
+  $variables['attributes']['class'][] = 'photoswipe';
+  $variables['attributes']['data-size'] = $dimensions['width'] . 'x' . $dimensions['height'];
+  $variables['attributes']['data-overlay-title'] = $caption;
+}
diff --git a/src/Plugin/Field/FieldFormatter/PhotoswipeFieldFormatter.php b/src/Plugin/Field/FieldFormatter/PhotoswipeFieldFormatter.php
index 5d1bd33..2157cd3 100644
--- a/src/Plugin/Field/FieldFormatter/PhotoswipeFieldFormatter.php
+++ b/src/Plugin/Field/FieldFormatter/PhotoswipeFieldFormatter.php
@@ -257,7 +257,7 @@ class PhotoswipeFieldFormatter extends FormatterBase {
    * @return array
    *   The modified settings form structure of this formatter.
    */
-  private function addEntityReferenceSettings(array $element) {
+  public function addEntityReferenceSettings(array $element) {
     if ($this->fieldDefinition->getType() !== 'entity_reference') {
       return $element;
     }
diff --git a/src/Plugin/Field/FieldFormatter/PhotoswipeResponsiveFieldFormatter.php b/src/Plugin/Field/FieldFormatter/PhotoswipeResponsiveFieldFormatter.php
new file mode 100644
index 0000000..dcc15ea
--- /dev/null
+++ b/src/Plugin/Field/FieldFormatter/PhotoswipeResponsiveFieldFormatter.php
@@ -0,0 +1,318 @@
+<?php
+
+namespace Drupal\photoswipe\Plugin\Field\FieldFormatter;
+
+use Drupal\Core\Field\FieldItemListInterface;
+use Drupal\Core\Form\FormStateInterface;
+use Drupal\image\Entity\ImageStyle;
+use Drupal\photoswipe\Plugin\Field\FieldFormatter\PhotoswipeFieldFormatter;
+use Drupal\responsive_image\Entity\ResponsiveImageStyle;
+
+/**
+ * Plugin implementation of the 'photoswipe_respoinsive_field_formatter' formatter.
+ *
+ * @FieldFormatter(
+ *   id = "photoswipe_respoinsive_field_formatter",
+ *   label = @Translation("Photoswipe Responsive"),
+ *   field_types = {
+ *     "entity_reference",
+ *     "image"
+ *   }
+ * )
+ */
+class PhotoswipeResponsiveFieldFormatter extends PhotoswipeFieldFormatter {
+
+  /**
+   * {@inheritdoc}
+   */
+  public function settingsForm(array $form, FormStateInterface $form_state) {
+
+    $resp_image_store = \Drupal::entityTypeManager()->getStorage('responsive_image_style');
+
+    $responsive_image_options = [];
+    $responsive_image_styles = $resp_image_store->loadMultiple();
+    if ($responsive_image_styles && !empty($responsive_image_styles)) {
+      foreach ($responsive_image_styles as $machine_name => $responsive_image_style) {
+        if ($responsive_image_style->hasImageStyleMappings()) {
+          $responsive_image_options[$machine_name] = $responsive_image_style->label();
+        }
+      }
+    }
+
+    $image_styles = image_style_options(FALSE);
+    $element['photoswipe_node_style_first'] = [
+      '#title' => $this->t('Node image style for first image'),
+      '#type' => 'select',
+      '#default_value' => $this->getSetting('photoswipe_node_style_first'),
+      '#empty_option' => $this->t('No special style.'),
+      '#options' => $responsive_image_options,
+      '#description' => $this->t('Image style to use in the content for the first image.'),
+    ];
+    $element['photoswipe_node_style'] = [
+      '#title' => $this->t('Node image style'),
+      '#type' => 'select',
+      '#default_value' => $this->getSetting('photoswipe_node_style'),
+      '#empty_option' => $this->t('None (original image)'),
+      '#options' => $responsive_image_options,
+      '#description' => $this->t('Image style to use in the node.'),
+    ];
+    $element['photoswipe_image_style'] = [
+      '#title' => $this->t('Photoswipe image style'),
+      '#type' => 'select',
+      '#default_value' => $this->getSetting('photoswipe_image_style'),
+      '#empty_option' => $this->t('None (original image)'),
+      '#options' => $image_styles,
+      '#description' => $this->t('Image style to use in the Photoswipe.'),
+    ];
+
+    // Set our caption options.
+    $caption_options = [
+      'title' => $this->t('Image title tag'),
+      'alt' => $this->t('Image alt tag'),
+      'node_title' => $this->t('Entity title'),
+      'custom' => $this->t('Custom (with tokens)'),
+    ];
+
+    $element = parent::addEntityReferenceSettings($element);
+
+    // Add the other parent entity fields as options.
+    if (isset($form['#fields'])) {
+      foreach ($form['#fields'] as $parent_field) {
+        if ($parent_field != $this->fieldDefinition->getName()) {
+          $caption_options[$parent_field] = $parent_field;
+        }
+      }
+    }
+
+    $element['photoswipe_caption'] = [
+      '#title' => $this->t('Photoswipe image caption'),
+      '#type' => 'select',
+      '#default_value' => $this->getSetting('photoswipe_caption'),
+      '#options' => $caption_options,
+      '#description' => $this->t('Field that should be used for the caption.'),
+    ];
+
+    $element['photoswipe_caption_custom'] = [
+      '#title' => $this->t('Custom caption'),
+      '#type' => 'textarea',
+      '#default_value' => $this->getSetting('photoswipe_caption_custom'),
+      '#states' => [
+        'visible' => [
+          ':input[name$="[settings][photoswipe_caption]"]' => ['value' => 'custom'],
+        ],
+      ],
+    ];
+    if (\Drupal::moduleHandler()->moduleExists('token')) {
+      $element['photoswipe_token_caption'] = [
+        '#type' => 'fieldset',
+        '#title' => t('Replacement patterns'),
+        '#theme' => 'token_tree_link',
+        // A KLUDGE! Need to figure out current entity type in both entity display and views contexts.
+        '#token_types' => ['file', 'node'],
+        '#states' => [
+          'visible' => [
+            ':input[name$="[settings][photoswipe_caption]"]' => ['value' => 'custom'],
+          ],
+        ],
+      ];
+    }
+    else {
+      $element['photoswipe_token_caption'] = [
+        '#type' => 'fieldset',
+        '#title' => $this->t('Replacement patterns'),
+        '#description' => '<strong class="error">' . $this->t('For token support the <a href="@token_url">token module</a> must be installed.', ['@token_url' => 'http://drupal.org/project/token']) . '</strong>',
+        '#states' => [
+          'visible' => [
+            ':input[name$="[settings][photoswipe_caption]"]' => ['value' => 'custom'],
+          ],
+        ],
+      ];
+    }
+
+    // Add the current view mode so we can control view mode for node fields.
+    $element['photoswipe_view_mode'] = [
+      '#type' => 'hidden',
+      '#value' => $this->viewMode,
+    ];
+
+    return $element + parent::settingsForm($form, $form_state);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function settingsSummary() {
+    $summary = [];
+
+    $resp_image_store = \Drupal::entityTypeManager()->getStorage('responsive_image_style');
+
+    $responsive_image_options = [];
+    $responsive_image_styles = $resp_image_store->loadMultiple();
+    if ($responsive_image_styles && !empty($responsive_image_styles)) {
+      foreach ($responsive_image_styles as $machine_name => $responsive_image_style) {
+        if ($responsive_image_style->hasImageStyleMappings()) {
+          $responsive_image_options[$machine_name] = $responsive_image_style->label();
+        }
+      }
+    }
+
+    $image_styles = image_style_options(FALSE);
+    // Unset possible 'No defined styles' option.
+    unset($image_styles['']);
+    // Styles could be lost because of enabled/disabled modules that defines
+    // their styles in code.
+    if (isset($responsive_image_options[$this->getSetting('photoswipe_node_style')])) {
+      $summary[] = $this->t('Node image style: @style', ['@style' => $responsive_image_options[$this->getSetting('photoswipe_node_style')]]);
+    }
+    else {
+      $summary[] = $this->t('Node image style: Original image');
+    }
+
+    if (isset($responsive_image_options[$this->getSetting('photoswipe_node_style_first')])) {
+      $summary[] = $this->t('Node image style of first image: @style', ['@style' => $responsive_image_options[$this->getSetting('photoswipe_node_style_first')]]);
+    }
+    else {
+      $summary[] = $this->t('Node image style of first image: Original image');
+    }
+
+    if (isset($image_styles[$this->getSetting('photoswipe_image_style')])) {
+      $summary[] = $this->t('Photoswipe image style: @style', ['@style' => $image_styles[$this->getSetting('photoswipe_image_style')]]);
+    }
+    else {
+      $summary[] = $this->t('photoswipe image style: Original image');
+    }
+
+    if ($this->getSetting('photoswipe_reference_image_field')) {
+      $summary[] = $this->t('Referenced entity image field: @field', ['@field' => $this->getSetting('photoswipe_reference_image_field')]);
+    }
+
+    if ($this->getSetting('photoswipe_caption')) {
+      $caption_options = [
+        'alt' => $this->t('Image alt tag'),
+        'title' => $this->t('Image title tag'),
+        'node_title' => $this->t('Entity title'),
+        'custom' => $this->t('Custom (with tokens)'),
+      ];
+      if (array_key_exists($this->getSetting('photoswipe_caption'), $caption_options)) {
+        $caption_setting = $caption_options[$this->getSetting('photoswipe_caption')];
+      }
+      else {
+        $caption_setting = $this->getSetting('photoswipe_caption');
+      }
+      $summary[] = $this->t('Photoswipe Caption: @field', ['@field' => $caption_setting]);
+    }
+
+    return $summary;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function viewElements(FieldItemListInterface $items, $langcode) {
+    $elements = [];
+    $settings = $this->getSettings();
+
+    if ($items->isEmpty()) {
+      $default_image = $this->getFieldSetting('default_image');
+      // If we are dealing with a configurable field, look in both
+      // instance-level and field-level settings.
+      if (empty($default_image['uuid']) && $this->fieldDefinition instanceof FieldConfigInterface) {
+        $default_image = $this->fieldDefinition->getFieldStorageDefinition()
+          ->getSetting('default_image');
+      }
+      if (!empty($default_image['uuid']) && $file = \Drupal::entityManager()->loadEntityByUuid('file', $default_image['uuid'])) {
+        // Clone the FieldItemList into a runtime-only object for the formatter,
+        // so that the fallback image can be rendered without affecting the
+        // field values in the entity being rendered.
+        $items = clone $items;
+        $items->setValue([
+          'target_id' => $file->id(),
+          'alt' => $default_image['alt'],
+          'title' => $default_image['title'],
+          'width' => $default_image['width'],
+          'height' => $default_image['height'],
+          'entity' => $file,
+          '_loaded' => TRUE,
+          '_is_default' => TRUE,
+        ]);
+      }
+    }
+
+    \Drupal::service('photoswipe.assets_manager')->attach($elements);
+    if (!empty($items) && count($items) > 1) {
+      // If there are more than 1 elements, add the gallery wrapper. Otherwise this is done in javascript for more flexibility.
+      $elements['#prefix'] = '<div class="photoswipe-gallery">';
+      $elements['#suffix'] = '</div>';
+    }
+
+    foreach ($items as $delta => $item) {
+      $elements[$delta] = [
+        '#theme' => 'photoswipe_responsive_image_formatter',
+        '#item' => $item,
+        '#entity' => $items->getEntity(),
+        '#display_settings' => $settings,
+        '#delta' => $delta,
+      ];
+    }
+
+    return $elements;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function calculateDependencies() {
+    $dependencies = parent::calculateDependencies();
+
+    $resp_style_id = $this->getSetting('photoswipe_node_style');
+    /** @var \Drupal\responsive_image\ResponsiveImageStyleInterface $style */
+    if ($resp_style_id && $style = ResponsiveImageStyle::load($resp_style_id)) {
+      // Add the responsive image style as dependency.
+      $dependencies[$style->getConfigDependencyKey()][] = $style->getConfigDependencyName();
+    }
+
+    if (!empty($this->getSetting('photoswipe_node_style_first'))) {
+      $resp_style_id = $this->getSetting('photoswipe_node_style_first');
+      /** @var \Drupal\responsive_image\ResponsiveImageStyleInterface $style */
+      if ($resp_style_id && $style = ResponsiveImageStyle::load($resp_style_id)) {
+        // Add the responsive image style as dependency.
+        $dependencies[$style->getConfigDependencyKey()][] = $style->getConfigDependencyName();
+      }
+    }
+
+    $style_id = $this->getSetting('photoswipe_image_style');
+    /** @var \Drupal\image\ImageStyleInterface $style */
+    if ($style_id && $style = ImageStyle::load($style_id)) {
+      // If this formatter uses a valid image style to display the image, add
+      // the image style configuration entity as dependency of this formatter.
+      $dependencies[$style->getConfigDependencyKey()][] = $style->getConfigDependencyName();
+    }
+    return $dependencies;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function onDependencyRemoval(array $dependencies) {
+    $changed = parent::onDependencyRemoval($dependencies);
+    $style_ids = [];
+    $style_ids['photoswipe_image_style'] = $this->getSetting('photoswipe_image_style');
+    /** @var \Drupal\image\ImageStyleInterface $style */
+    foreach ($style_ids as $name => $style_id) {
+      if ($style_id && $style = ImageStyle::load($style_id)) {
+        if (!empty($dependencies[$style->getConfigDependencyKey()][$style->getConfigDependencyName()])) {
+          $replacement_id = $this->imageStyleStorage->getReplacementId($style_id);
+          // If a valid replacement has been provided in the storage, replace
+          // the image style with the replacement and signal that the formatter
+          // plugin settings were updated.
+          if ($replacement_id && ImageStyle::load($replacement_id)) {
+            $this->setSetting($name, $replacement_id);
+            $changed = TRUE;
+          }
+        }
+      }
+    }
+    return $changed;
+  }
+
+}
