<?php

/**
 * @file
 * Main file for installation on update hooks.
 */

use Drupal\Core\Config\FileStorage;
use Drupal\Core\Config\InstallStorage;
use Drupal\Core\StringTranslation\TranslatableMarkup;
use Drupal\druki_content\Entity\DrukiContentInterface;

/**
 * Implements hook_requirements().
 */
function druki_content_requirements($phase): array {
  $requirements = [];

  if ($phase == 'install') {
    if (!class_exists('Symfony\Component\DomCrawler\Crawler')) {
      $requirements['druki_parser_status'] = [
        'title' => 'Druki Content Sync',
        'value' => t('The required dependency @dependency is missing. Install it and try again.', ['@dependency' => 'symfony/dom-crawler']),
        'severity' => REQUIREMENT_ERROR,
      ];
    }

    if (!class_exists('Symfony\Component\Finder\Finder')) {
      $requirements['druki_parser_status'] = [
        'title' => 'Druki Content Sync',
        'value' => t('The required dependency @dependency is missing. Install it and try again.', ['@dependency' => 'symfony/finder']),
        'severity' => REQUIREMENT_ERROR,
      ];
    }
  }

  return $requirements;
}

/**
 * Implements hook_uninstall()
 */
function druki_content_uninstall() {
  // Remove state settings.
  \Drupal::state()->delete('druki_content.settings.force_update');
}

/**
 * Move two base entity fields to configuration fields.
 *
 * If you are looking at this hook update for learning purposes, don't forget,
 * you also must remove base field definition from the entity object codebase,
 * before executing this hook.
 *
 * For less complex example see
 * comment_post_update_enable_comment_admin_view().
 */
function druki_content_update_8601(&$sandbox) {
  $module_handler = \Drupal::moduleHandler();
  $druki_content_module = $module_handler->getModule('druki_content');
  $config_install_path = $druki_content_module->getPath() . '/' . InstallStorage::CONFIG_INSTALL_DIRECTORY;
  $definition_update_manager = \Drupal::entityDefinitionUpdateManager();
  $entity_type_manager = \Drupal::entityTypeManager();
  // Load config folder.
  $storage = new FileStorage($config_install_path);

  $forced_path_field = $definition_update_manager
    ->getFieldStorageDefinition('forced_path', 'druki_content');
  if ($forced_path_field) {
    // Uninstall "forced_path" base field.
    $definition_update_manager->uninstallFieldStorageDefinition($forced_path_field);

    // Install "forced_path" field.
    // Install storage.
    $entity_type_manager
      ->getStorage('field_storage_config')
      ->create($storage->read('field.storage.druki_content.forced_path'))
      ->save();

    // Install field.
    $entity_type_manager
      ->getStorage('field_config')
      ->create($storage->read('field.field.druki_content.druki_content.forced_path'))
      ->save();
  }

  $category_field = $definition_update_manager
    ->getFieldStorageDefinition('category', 'druki_content');
  if ($category_field) {
    // Uninstall "category" base field.
    $definition_update_manager->uninstallFieldStorageDefinition($category_field);

    // Install "category" field.
    // Install storage.
    $entity_type_manager
      ->getStorage('field_storage_config')
      ->create($storage->read('field.storage.druki_content.category'))
      ->save();

    // Install field.
    $entity_type_manager
      ->getStorage('field_config')
      ->create($storage->read('field.field.druki_content.druki_content.category'))
      ->save();
  }

  // Restore previous values.
  // Make sure you call it after fields are changed, because database structure
  // will be changed during process above.
  $druki_content_storage = $entity_type_manager->getStorage('druki_content');
  /** @var \Drupal\Core\Entity\Sql\DefaultTableMapping $table_mapping */
  $table_mapping = $druki_content_storage->getTableMapping();
  $database = \Drupal::database();

  // Restore "forced_path" values.
  if ($forced_path_field) {
    $forced_path_deleted_data_table = $table_mapping->getDedicatedDataTableName($forced_path_field, TRUE);
    $results = $database->select($forced_path_deleted_data_table, 'dd')
      ->fields('dd')
      ->execute()
      ->fetchAll();

    foreach ($results as $result) {
      $druki_content = $druki_content_storage->load($result->entity_id);

      if ($druki_content instanceof DrukiContentInterface) {
        $druki_content->set('forced_path', $result->forced_path_value);
        $druki_content->save();
      }
    }
  }

  // Restore "category" values.
  if ($category_field) {
    $category_field_deleted_data_table = $table_mapping->getDedicatedDataTableName($category_field, TRUE);
    $results = $database->select($category_field_deleted_data_table, 'dd')
      ->fields('dd')
      ->execute()
      ->fetchAll();

    foreach ($results as $result) {
      $druki_content = $druki_content_storage->load($result->entity_id);

      if ($druki_content instanceof DrukiContentInterface) {
        $druki_content->set('category', [
          'area' => $result->category_area,
          'order' => $result->category_order,
          'title' => $result->category_title,
        ]);
        $druki_content->save();
      }
    }
  }

  return t('Both base fields moved into configs.');
}

/**
 * Adds metatag field to druki_content.
 */
function druki_content_update_8602(&$sandbox) {
  $module_handler = \Drupal::moduleHandler();
  $druki_content_module = $module_handler->getModule('druki_content');
  $config_install_path = $druki_content_module->getPath() . '/' . InstallStorage::CONFIG_INSTALL_DIRECTORY;
  $definition_update_manager = \Drupal::entityDefinitionUpdateManager();
  $entity_type_manager = \Drupal::entityTypeManager();
  // Load config folder.
  $storage = new FileStorage($config_install_path);

  $metatags_field = $definition_update_manager
    ->getFieldStorageDefinition('metatags', 'druki_content');
  if (!$metatags_field) {
    // Install storage.
    $entity_type_manager
      ->getStorage('field_storage_config')
      ->create($storage->read('field.storage.druki_content.metatags'))
      ->save();

    // Install field.
    $entity_type_manager
      ->getStorage('field_config')
      ->create($storage->read('field.field.druki_content.druki_content.metatags'))
      ->save();

    return t('The metatag field was installed.');
  }
  else {
    return t('The metatag field is found on druki_content entity. The update is skipped.');
  }
}

/**
 * Migrate druki_content_sync state value to druki_content.
 */
function druki_content_update_8801(array &$sandbox) {
 $state = \Drupal::state();
 $value = $state->get('druki_content_sync.settings.force_update', FALSE);
 $state->delete('druki_content_sync.settings.force_update');
 $state->set('druki_content.settings.force_update', $value);

 return new TranslatableMarkup('Sync settings was migrated.');
}

/**
 * Save values from the old field to temporary table.
 */
function druki_content_update_8802(array &$sandbox) {
  $state = \Drupal::state();
  $value = $state->get('druki_content_sync.settings.force_update', FALSE);
  $state->delete('druki_content_sync.settings.force_update');
  $state->set('druki_content.settings.force_update', $value);

  return new TranslatableMarkup('Sync settings was migrated.');
}
