{"version":3,"sources":["_globals.scss","_focus.scss","_selection.scss","../settings/_variables.override.scss","../settings/_colors.scss","_page.scss","_typography.scss","../tools/mixins/_media-breakpoint.scss","_headings.scss","../tools/mixins/_font-size.scss","_links.scss","../tools/functions/_colors.scss","_lists.scss","_images.scss","_blockquotes.scss","_horizontal-rules.scss"],"names":[],"mappings":"AAIA;EACE,sBAAsB;EAEtB,YAAY,EAAA;;ACCd;EACE,aAAa,EAAA;;ACFf;EACE,mBCJgB;EDKhB,cEMgB,EAAA;;AFRlB;EACE,mBCJgB;EDKhB,cEMgB,EAAA;;ACXlB;EACE,qCAAkB,EAAA;;AAGpB;EACE,kCAAkC,EAAA;;ACLpC;EACE,sBAAiB;EACjB,oCAAe;EACf,0DAAiB;EACjB,wCAAiB;EACjB,kCAAc;EACd,uBAAmB;EACnB,4BAAa;EACb,qCAAkB;EAClB,yCAAkB,EAAA;;AAGpB;EACE,+BAA+B;EAC/B,gCAAgC;EAChC,oCAAoC;EACpC,wBAAwB,EAAA;;AAG1B;EACE,2BAA2B,EAAA;;AAG7B;EACE,cAAc;EACd,mBAAmB,EAAA;;AAGrB;EACE,eAAe;EACf,mBAAmB,EAAA;;AAGrB;EACE,0BAA0B;EAC1B,wCAAwC,EAAA;;AAG1C;EACE,kCAAkC;EAClC,cAAc;EACd,gBAAgB;EAChB,qBAAqB;EACrB,kBAAkB;EAClB,wCAAwC,EAAA;;AAG1C;EAEE,cAAc,EAAA;;ACzBZ;ED8BF;IACE,cAAc;IACd,QAAQ;IACR,YAAY;IACZ,iBAAiB;IACjB,WAAW,EAAA,EACZ;;AErDH;ECiCE,kBAAkD;EAOhD,oBAAwC,EAAA;;ADpC5C;EC6BE,kBAAkD;EAOhD,oBAAwC,EAAA;;ADhC5C;ECyBE,iBAAkD;EAOhD,oBAAwC,EAAA;;AD5B5C;ECqBE,kBAAkD;EAOhD,gBAAwC,EAAA;;ADxB5C;ECiBE,mBAAkD;EAOhD,oBAAwC,EAAA;;ADpB5C;ECaE,eAAkD;EAOhD,gBAAwC,EAAA;;ADhB5C;;;;;;EAME,iBAAiB;EACjB,kBAAkB,EAAA;;AEtCpB;EACE,8BC0FkD;EDzFlD,qBAAqB,EAAA;EAFvB;IAKI,iCCsFgD;IDrFhD,qBAAqB,EAAA;;AEHzB;EACE,wBAJ6B;EAK7B,UAJe,EAAA;;ACDjB;EACE,eAAe;EAEf,YAAY;EAEZ,kBAAkB;EAElB,sBAAsB,EAAA;;ACPxB;EACE,+CAAuB;EACvB,6BAAyB;EACzB,6CAAsB;EACtB,wDAAqB;EACrB,oCAAwB;EACxB,kCAA0B;EAE1B,sCAAsC;EACtC,mCAAmC;EACnC,iCAAiC;EACjC,+EAA+E;EAC/E,wCAAwC,EAAA;;ACZ1C;EACE,0CAA0C;EAC1C,aAAa;EACb,6BXIgB,EAAA","file":"../elements.css","sourcesContent":["// =============================================================================\n// Globals.\n// =============================================================================\n\n* {\n  box-sizing: border-box;\n  // Workaround for flexboxes.\n  min-width: 0;\n}\n","// =============================================================================\n// Focus.\n//\n// It's a good practice to leave focus on element. If you disable it make sure\n// you have other visual implementation for focused elements!\n// @see http://www.outlinenone.com/\n// =============================================================================\n\n:focus {\n  outline: none;\n}\n","// =============================================================================\n// Selection.\n// =============================================================================\n\n$selection-bg:    theme-color(primary, true) !default;\n$selection-color: color-yiq($selection-bg) !default;\n\n::selection {\n  background: $selection-bg;\n  color: $selection-color;\n}\n","$font-family: 'Roboto', sans-serif;\n$font-family-monospace: 'Fira Code', monospaced;\n\n$theme-colors: (\n  primary: #FFD029,\n  on-primary: #3F2F17,\n  secondary: #3F2F17,\n  on-secondary: #FFD029,\n\n  note: #0048DC,\n\n  background: #F6F8FA,\n  header-background: #ECEEF2,\n\n  link: #0046b3,\n\n  code-background: #F6F8FA,\n);\n","// =============================================================================\n// Color variables.\n// =============================================================================\n\n// Base colors.\n$white: #ffffff !default;\n$gray-50: #fafafa !default;\n$gray-100: #f5f5f5 !default;\n$gray-200: #eeeeee !default;\n$gray-300: #e0e0e0 !default;\n$gray-400: #bdbdbd !default;\n$gray-500: #9e9e9e !default;\n$gray-600: #757575 !default;\n$gray-700: #616161 !default;\n$gray-800: #424242 !default;\n$gray-900: #212121 !default;\n$black: #000000 !default;\n\n$grays: () !default;\n$grays: map-merge((\n  50: $gray-50,\n  100: $gray-100,\n  200: $gray-200,\n  300: $gray-300,\n  400: $gray-400,\n  500: $gray-500,\n  600: $gray-600,\n  700: $gray-700,\n  800: $gray-800,\n  900: $gray-900\n), $grays);\n\n$blue: #1976d2 !default;\n$indigo: #6610f2 !default;\n$purple: #6f42c1 !default;\n$pink: #e83e8c !default;\n$red: #dc3545 !default;\n$orange: #fd7e14 !default;\n$yellow: #ffc107 !default;\n$green: #67c23a !default;\n$teal: #20c997 !default;\n$cyan: #17a2b8 !default;\n\n$colors: () !default;\n$colors: map-merge((\n  blue: $blue,\n  indigo: $indigo,\n  purple: $purple,\n  pink: $pink,\n  red: $red,\n  orange: $orange,\n  yellow: $yellow,\n  green: $green,\n  teal: $teal,\n  cyan: $cyan,\n  white: $white,\n  gray: $gray-600,\n  gray-dark: $gray-800\n), $colors);\n\n// Colors used in theme. Such as text colors, buttons, links and so on.\n// Here is main colors of the theme.\n// @see https://material.io/tools/color/ - can help you to chose correct colors.\n// @see https://material.io/design/color/the-color-system.html#color-usage-palettes\n// very good description, what is all about.\n$theme-colors: () !default;\n$theme-colors: map-merge((\n  primary: $blue,\n  primary-variant: $blue,\n  on-primary: $white,\n\n  secondary: $indigo,\n  secondary-variant: $indigo,\n  on-secondary: $black,\n\n  background: $white,\n  surface: $white,\n\n  success: $green,\n  info: $gray-500,\n  warning: $yellow,\n  error: $red,\n), $theme-colors);\n\n$theme-color-interval: 8% !default;\n\n$yiq-text-dark: $gray-900 !default;\n$yiq-text-light: $white !default;\n","// =============================================================================\n// Page.\n// =============================================================================\n\n:root {\n  --body-background: hsl(210, 29%, 97%);\n}\n\nbody {\n  background: var(--body-background);\n}\n","// =============================================================================\n// Typography.\n// =============================================================================\n\n:root {\n  --font-size-base: 16px;\n  --font-primary: 'Roboto', sans-serif;\n  --font-secondary: Georgia, 'Times New Roman', Times, serif;\n  --font-monospace: 'Fira Code', monospace;\n  --font-family: var(--font-primary);\n  --body-line-height: 1.4;\n  --text-color: hsl(0, 0%, 7%);\n  --mark-background: hsl(60, 100%, 50%);\n  --code-background: var(--body-background);\n}\n\nbody {\n  font-family: var(--font-family);\n  font-size: var(--font-size-base);\n  line-height: var(--body-line-height);\n  color: var(--text-color);\n}\n\np {\n  margin: var(--spacing-sm) 0;\n}\n\nsmall {\n  font-size: 80%;\n  font-weight: normal;\n}\n\nbig {\n  font-size: 120%;\n  font-weight: normal;\n}\n\nmark {\n  padding: var(--spacing-xs);\n  background-color: var(--mark-background);\n}\n\ncode {\n  font-family: var(--font-monospace);\n  font-size: 90%;\n  padding: 4px 6px;\n  word-break: break-all;\n  border-radius: 4px;\n  background-color: var(--code-background);\n}\n\npre code {\n  // Fixes unwanted paddings for first and last line of code.\n  padding: unset;\n}\n\n@include media-breakpoint-down(md) {\n  // Offset for anchors.\n  :target::before {\n    display: block;\n    width: 0;\n    height: 80px;\n    margin: -80px 0 0;\n    content: \"\";\n  }\n}\n","// =====================================\n// Apply styles for provided breakpoint and higher.\n// @example\n//   media-breakpoint-up(md)\n//   Will apply style to 768px and higher.\n// =====================================\n@mixin media-breakpoint-up($name, $breakpoints: $media-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  @if $min {\n    $em: ($min / $global-font-size) * 1em;\n    @media (min-width: $em) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// =====================================\n// Apply styles for provided breakpoint and lower.\n// @example\n//   media-breakpoint-down(md)\n//   Will apply style to 768px and lower.\n// =====================================\n@mixin media-breakpoint-down($name, $breakpoints: $media-breakpoints) {\n  $max: breakpoint-max($name, $breakpoints);\n  @if $max {\n    $em: ($max / $global-font-size) * 1em;\n    @media (max-width: $em) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// =====================================\n// Apply styles for provided breakpoint and higher.\n// @example\n//   media-breakpoint-up(md)\n//   Will apply style to 768px and higher.\n// =====================================\n@mixin media-breakpoint-between($lower, $upper, $breakpoints: $media-breakpoints) {\n  @include media-breakpoint-up($lower, $breakpoints) {\n    @include media-breakpoint-down($upper, $breakpoints) {\n      @content;\n    }\n  }\n}\n\n// =====================================\n// Apply styles only for provided breakpoint.\n// @example\n//   media-breakpoint-only(md)\n//   Will apply style between 768px and 991px.\n// =====================================\n@mixin media-breakpoint-only($name, $breakpoints: $media-breakpoints) {\n  @include media-breakpoint-between($name, $name, $breakpoints) {\n    @content;\n  }\n}\n\n// =====================================\n// Container maximize width allowed for container without gutters.\n// =====================================\n@mixin make-container-max-widths($max-widths: $container-max-widths, $breakpoints: $media-breakpoints) {\n  @each $breakpoint, $container-max-width in $max-widths {\n    @include media-breakpoint-up($breakpoint, $breakpoints) {\n      width: ($container-max-width / $global-font-size) * 1em;\n      max-width: 100%;\n    }\n  }\n}\n\n// =====================================\n// Container max width with centering and gutters.\n// =====================================\n@mixin make-container($gutter: $grid-gutter-width) {\n  width: 100%;\n  padding-right: $gutter / 2;\n  padding-left: $gutter / 2;\n  margin-right: auto;\n  margin-left: auto;\n}\n","// =============================================================================\n// Headings.\n// =============================================================================\n\n$font-size-h1: 36px !default;\n$font-size-h2: 28px !default;\n$font-size-h3: 24px !default;\n$font-size-h4: 20px !default;\n$font-size-h5: 18px !default;\n$font-size-h6: 16px !default;\n\nh1 {\n  @include font-size($font-size-h1);\n}\n\nh2 {\n  @include font-size($font-size-h2);\n}\n\nh3 {\n  @include font-size($font-size-h3);\n}\n\nh4 {\n  @include font-size($font-size-h4);\n}\n\nh5 {\n  @include font-size($font-size-h5);\n}\n\nh6 {\n  @include font-size($font-size-h6);\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n  margin-top: 1.5em;\n  margin-bottom: 1em;\n}\n","// =============================================================================\n// Font size with line-height.\n// =============================================================================\n\n// =============================================================================\n// Generates rem font-size.\n//\n// Allow to handle line-height and important state for font size. It's generated\n// in rem, but has px fallback.\n//\n// Simple usage:\n// @code\n// @include font-size(16px);\n// @endcode\n//\n// Force line-height to be specific size:\n// @code\n// @include font-size(16px, 1.5);\n// @endcode\n//\n// Adds 2 lines to font-size line-height.\n// @code\n// @include font-size(16px, $modifier: +2);\n// @endcode\n//\n// @param string|int $font-size\n//   The font size in px or integer.\n// @param string|int $line-height\n//   The line height for font size.\n// @param int $modifier\n//   The lines modifier.\n// @param bool $important\n//   The important indicator.\n// =============================================================================\n@mixin font-size($font-size, $line-height: auto, $modifier: 0, $important: false) {\n  // Handle important mark.\n  @if ($important == true) {\n    $important: !important;\n  } @else {\n    $important: null;\n  }\n\n  // Uncomment for font size with px fallback.\n  //font-size: $font-size $important;\n  font-size: ($font-size / $global-font-size) * 1rem $important;\n\n  @if ($line-height == 'auto') {\n    // Calculate line-height.\n    $lines: ceil($font-size / $global-baseline) + $modifier + 1;\n    $line-height: $lines * $global-baseline;\n\n    line-height: ($line-height / $font-size) $important;\n  } @else if (type-of($line-height) == number or $line-height == 'inherit' or $line-height == 'normal') {\n    line-height: $line-height $important;\n  }\n}\n","// =============================================================================\n// Links.\n// =============================================================================\n\na {\n  color: theme-color(link);\n  text-decoration: none;\n\n  &:hover {\n    color: theme-color(primary);\n    text-decoration: none;\n  }\n}\n","// =====================================\n// Return mixed color by his key and variant name.\n//\n// @see https://material.io/design/color/the-color-system.html#color-usage-palettes\n//\n// Official Material palette is handcrafted, so this function mix colors close\n// as possible, but there is not 100% match.\n// @see https://github.com/mbitson/mcg/issues/94#issuecomment-277840806\n// ====================================\n@function color-palette($color, $variant: 500) {\n  @if ($variant == 50) {\n    @return lighten($color, 52%);\n  }\n  @else if ($variant == 100) {\n    @return lighten($color, 37%);\n  }\n  @else if ($variant == 200) {\n    @return lighten($color, 26%);\n  }\n  @else if ($variant == 300) {\n    @return lighten($color, 12%);\n  }\n  @else if ($variant == 400) {\n    @return lighten($color, 6%);\n  }\n  @else if ($variant == 500) {\n    @return $color;\n  }\n  @else if ($variant == 600) {\n    @return darken($color, 6%);\n  }\n  @else if ($variant == 700) {\n    @return darken($color, 12%);\n  }\n  @else if ($variant == 800) {\n    @return darken($color, 18%);\n  }\n  @else if ($variant == 900) {\n    @return darken($color, 24%);\n  }\n  @else if ($variant == A100) {\n    @return saturate(lighten($color, 50%), 30%);\n  }\n  @else if ($variant == A200) {\n    @return saturate(lighten($color, 30%), 30%);\n  }\n  @else if ($variant == A400) {\n    @return saturate(lighten($color, 10%), 15%);\n  }\n  @else if ($variant == A700) {\n    @return saturate(lighten($color, 5%), 5%);\n  }\n  @else {\n    @error \"Sorry, but \"#{$variant}\" is not a valid value for $variant. Available values: 50, 100, 200, 300, 400, 500, 600, 700, 800, 900, A100, A200, A400, A700.\"\n  }\n}\n\n// =====================================\n// Compares contrast of a given color to the light/dark arguments and returns\n// whichever is most \"contrasty\".\n// ====================================\n@function color-yiq($color, $dark: $yiq-text-dark, $light: $yiq-text-light) {\n  @if $color == null {\n    @return null;\n  } @else {\n    $yiq: (red($color) * 299 + green($color) * 587 + blue($color) * 114) / 1000;\n    @return if($yiq >= 128, $dark, $light);\n  }\n}\n\n// =====================================\n// Return color by his key.\n// ====================================\n@function color($key: blue) {\n  @return map-get($colors, $key);\n}\n\n// =====================================\n// Return mixed color by his key.\n// ====================================\n@function color-level($color-name: primary, $level: 0) {\n  $color: color($color-name);\n  $color-base: if($level > 0, #000000, #FFFFFF);\n  $level: abs($level);\n  @return mix($color-base, $color, $level * $theme-color-interval);\n}\n\n// =====================================\n// Return color by his key.\n// ====================================\n@function theme-color($key: primary, $value: false) {\n  @if $value {\n    @return map-get($theme-colors, $key);\n  }\n  @else {\n    @return var(--theme-color-#{$key});\n  }\n}\n\n// =====================================\n// Return mixed color by his key.\n// ====================================\n@function theme-color-level($color-name: primary, $level: 0) {\n  $color: theme-color($color-name, true);\n  $color-base: if($level > 0, #000000, #FFFFFF);\n  $level: abs($level);\n  @return mix($color-base, $color, $level * $theme-color-interval);\n}\n\n// =====================================\n// Return grey color by his key.\n// ====================================\n@function gray($key: 100) {\n  @return map-get($grays, $key);\n}\n","// =============================================================================\n// Lists.\n// =============================================================================\n\n$list-margins: 1rem 0 1rem 2rem !default;\n$list-paddings: 0 !default;\n\nol, ul {\n  margin: $list-margins;\n  padding: $list-paddings;\n}\n","// =============================================================================\n// Images.\n// =============================================================================\n\nimg {\n  max-width: 100%;\n  // Fixes aspect ratio.\n  height: auto;\n  // For ALT attribute.\n  font-style: italic;\n  // Fixes whitespace under images.\n  vertical-align: middle;\n}\n","// =============================================================================\n// Blockquotes.\n// =============================================================================\n\nblockquote {\n  --blockquote-font-size: var(--global-font-size);\n  --blockquote-border-size: 4px;\n  --blockquote-paddings: var(--global-baseline);\n  --blockquote-margins: calc(var(--global-baseline) * 2) 0;\n  --blockquote-background: transparent;\n  --blockquote-border-color: #{gray(400)};\n\n  font-size: var(--blockquote-font-size);\n  padding: var(--blockquote-paddings);\n  margin: var(--blockquote-margins);\n  border-left: var(--blockquote-border-size) solid var(--blockquote-border-color);\n  background: var(--blockquote-background);\n}\n","// =============================================================================\n// Horizontal rules.\n// =============================================================================\n\nhr {\n  margin: calc(var(--global-baseline) * 2) 0;\n  border: unset;\n  border-top: 1px solid gray(500);\n}\n"]}